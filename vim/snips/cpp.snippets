extends c

# general

snippet class
class ${1:`!v Filename('', 'UNTITLED')`} {
	public:
		${1/([\w_]+).*/$1/}();
		~${1/([\w_]+).*/$1/}();
	private:
		${2:/* data */}
};
endsnippet

snippet fg
#ifndef ${1:`!v toupper(Filename('', 'UNTITLED'))`}
#define $1

$2

#endif /* end of $1 */
endsnippet

snippet try
try {
	${1:/* code */}
} catch(...) {
	${2:/* handle exception */}
}
endsnippet

# algo

snippet code
#include      <algorithm>
#include      <cassert>
#include      <cmath>
#include      <cstdarg>
#include      <cstdio>
#include      <cstdlib>
#include      <fstream>
#include      <iomanip>
#include      <iostream>
#include      <iterator>
#include      <limits>
#include      <list>
#include      <map>
#include      <queue>
#include      <set>
#include      <sstream>
#include      <vector>
#define endl '\n'
using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;

int main() {
	ios_base::sync_with_stdio(false), cin.tie(0);
	$1
	return 0;
}
endsnippet

snippet codemath
template<typename T> inline T ceilDiv(T l, T r) {return (l / r) + ((l % r) != 0);}
const int oo = numeric_limits<int>::max();
endsnippet

snippet codeprinter
template<typename T1, typename T2> ostream& operator<<(ostream &o, const pair<T1, T2> &p) {return o << '(' << p.first << ", " << p.second << ')';}
template<typename I> ostream& print(ostream &o, I s, I e, int w = 5, int prec = 2, const string &sep = ", ", const string &lhs = "", const string &rhs = "") {
	o << lhs;
	if (s != e) o << setw(w) << setprecision(prec) << *(s++);
	for (; s != e; ++s) o << sep << setw(w) << setprecision(prec) << *s;
	return o << rhs;
}
template<typename T, template<typename E, typename A=std::allocator<E> > class C>
ostream& operator<<(ostream &o, const C<T>& c) {return print(o, c.begin(), c.end(), 0, 2, ", ", "[", "]");}
template<typename T, template<typename E, typename Compare = less<E>, typename Alloc = allocator<E> > class C>
ostream& operator<<(ostream &o, const C<T>& c) {return print(o, c.begin(), c.end(), 0, 2, ", ", "{", "}");}
template<typename K, typename T, template<typename E1, typename E2, typename Compare = std::less<E1>, class Allocator = std::allocator<std::pair<const E1, E2> > > class C>
ostream& operator<<(ostream &o, const C<K, T>& c) {return print(o, c.begin(), c.end(), 0, 2, ", ", "{", "}");}
endsnippet

snippet codereader
const int BUFF_SIZE = 1024 * 256;
char g_rbuffer[BUFF_SIZE], *g_rpos = g_rbuffer, *g_rend = g_rbuffer;
#define READ_HELPER(fnAccum, fnEnd, fnCheck) while (true) { for (; g_rpos != g_rend && (fnCheck); ++g_rpos) fnAccum;\
	if (g_rpos != g_rend) fnEnd; g_rend = g_rbuffer + read(0, g_rbuffer, BUFF_SIZE), g_rpos = g_rbuffer; }
template<typename R> void readNumber(R &rtn) {
	rtn = 0;
	READ_HELPER(;, break, *g_rpos < '0' || *g_rpos > '9'); READ_HELPER(rtn = rtn * 10 + *g_rpos - '0', return, *g_rpos >= '0' && *g_rpos <= '9');
}
endsnippet

snippet codewriter
char g_wbuffer[BUFF_SIZE];
char *g_wpos = g_wbuffer, *g_wend = g_wbuffer + BUFF_SIZE;
inline void flushWBuffer() { write(1, g_wbuffer, g_wpos - g_wbuffer); g_wpos = g_wbuffer;}
inline void writeChar(char ch) { *(g_wpos++) = ch; if (g_wpos == g_wend) flushWBuffer(); }
void writeBuffer(char *start, char *end) { for (; start != end; start += 1) writeChar(*start); }
template<typename I> void writeNumber(I n) {
	static char tmpBuffer[100];
	char *cur = tmpBuffer, *start = tmpBuffer;
	if (n == 0) { writeChar('0'); return; }
	if (n < 0) *(cur++) = '-', n *= -1, start += 1;
	while (n) *(cur++) = n % 10 + '0', n /= 10;
	reverse(start, cur); writeBuffer(tmpBuffer, cur);
}
endsnippet

snippet codejobs
#include      <algorithm>
#include      <cmath>
#include      <cstdarg>
#include      <cstdio>
#include      <cstdlib>
#include      <iomanip>
#include      <iostream>
#include      <iterator>
#include      <limits>
#include      <list>
#include      <map>
#include      <set>
#include      <vector>
#include      <pthread.h>
#include      <unistd.h>
#include      <queue>
#define endl '\n'
#define each(c, e) for (typeof(c.begin()) e = c.begin(); e != c.end(); ++e)
using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;

template<typename T, typename R> class JobQueue {
	private:
		template<typename D>
		struct DataWithNumber {
			int num;
			D data;
			DataWithNumber(int num = -1, const D &data = D()) : num(num), data(data) {}
			bool operator<(const DataWithNumber &o) const { return num < o.num; }
		};

		queue< DataWithNumber<T> > m_queueJobs;
		vector< DataWithNumber<R> > m_solutions;
		int m_jobNumber;
		pthread_mutex_t m_lock;
		void (*m_solvingFunction)(T &job, R &solution);
		void (*m_printingFunction)(int jobNumber, const R &solution);

		static void* waitAndSolve(void *voidSelf) {
			JobQueue *self = (JobQueue*)voidSelf;
			DataWithNumber<T> job;
			while (self->jobCount()) {
				bool bGot = self->getJob(job, SLEEP);
				if (bGot) {
					R result;
					self->m_solvingFunction(job.data, result);
					const int left = self->jobCount();
					// race
					pthread_mutex_lock(&self->m_lock);
					cerr << "Finished: " << job.num << ", left: " << left << endl;
					self->m_solutions.push_back(DataWithNumber<R>(job.num, result));
					pthread_mutex_unlock(&self->m_lock);
				}
			}
			return NULL;
		}
	public:
		JobQueue(void (*solvingFunction)(T &job, R &solution), void (*printingFunction)(int jobNumber, const R &solution)) : m_jobNumber(0), m_solvingFunction(solvingFunction), m_printingFunction(printingFunction) {
			pthread_mutex_init(&m_lock, NULL);
		}
		~JobQueue() { pthread_mutex_destroy(&m_lock); }
		static const int THREADS = 5;
		static const int SLEEP = 1;
		void addJob(const T &job) { pthread_mutex_lock(&m_lock); m_queueJobs.push(DataWithNumber<T>(++m_jobNumber, job)); pthread_mutex_unlock(&m_lock); }
		bool getJob(DataWithNumber<T> &job, int nWaitInterval = -1) {
			bool bGot = false;
			while (true) {
				pthread_mutex_lock(&m_lock);
				if (!m_queueJobs.empty()) { job = m_queueJobs.front(); m_queueJobs.pop(); bGot = true; }
				pthread_mutex_unlock(&m_lock);
				if (bGot) return true;
				else if (nWaitInterval != -1) sleep(nWaitInterval);
				else return false;
			}
		}
		int jobCount() {
			int cnt = 0;
			pthread_mutex_lock(&m_lock); cnt = m_queueJobs.size(); pthread_mutex_unlock(&m_lock);
			return cnt;
		}
		void getAll(queue<T> &queueJobs) { pthread_mutex_lock(&m_lock); queueJobs = m_queueJobs; pthread_mutex_unlock(&m_lock); }
		void waitToFinish() {
			bool bDone = false;
			while (!bDone) {
				pthread_mutex_lock(&m_lock); bDone = m_solutions.size() == m_jobNumber; pthread_mutex_unlock(&m_lock);
				sleep(SLEEP);
			}
			sort(m_solutions.begin(), m_solutions.end());
			for (size_t i = 0; i < m_solutions.size(); i += 1) m_printingFunction(i + 1, m_solutions[i].data);
		}
		void startSolvingAll() { for (int t = 1; t <= THREADS; t += 1) { pthread_t thread; pthread_create(&thread, NULL, &JobQueue::waitAndSolve, this); } }
};

void solve(int &job, int &solution) {
	solution = job;
}
void print(int jobNumber, const int &solution) {
	cout << "Case #" << jobNumber << ": " << solution << endl;
}

int main(int argc, char **argv) {
	ios_base::sync_with_stdio(false), cin.tie(0);

	JobQueue<int, int> test(solve, print);
	test.addJob(5);
	test.addJob(6);
	test.startSolvingAll();
	test.waitToFinish();

	return 0;
}

endsnippet
