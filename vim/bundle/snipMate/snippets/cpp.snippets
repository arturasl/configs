snippet class
	class ${1:`Filename('', 'UNTITLED')`} {
		public:
			$1();
			~$1();
		private:
			${2:/* data */}
	};
snippet u
	using namespace std;
snippet fg
	#ifndef ${1:`toupper(Filename('', 'UNTITLED'))`}
	#define $1

	${2:/* data */}

	#endif /* end of $1 */
snippet try
	try {
		${1:/* code */}
	} catch(...) {
		${2:/* handle exception */}
	}
snippet code
	#include      <algorithm>
	#include      <cmath>
	#include      <iomanip>
	#include      <iostream>
	#include      <iterator>
	#include      <limits>
	#include      <list>
	#include      <map>
	#include      <vector>
	#include      <cstdarg>
	#define endl '\n'
	#define each(c, e) for (typeof(c.begin()) e = c.begin(); e != c.end(); ++e)
	using namespace std;
	//const int INFTY = numeric_limits<int>::max();
	template<typename T> inline T ceilDiv(T l, T r) {return (l / r) + ((l % r) != 0);}
	template<typename T1, typename T2> ostream& operator<<(ostream &o, const pair<T1, T2> &p) {return o << '(' << p.first << ", " << p.second << ')';}
	template<typename I> ostream& print(ostream &o, I s, I e, int w = 5, int prec = 2, const string &sep = ", ", const string &lhs = "", const string &rhs = "") {
		o << lhs;
		if (s != e) o << setw(w) << setprecision(prec) << *(s++);
		for (; s != e; ++s) o << sep << setw(w) << setprecision(prec) << *s;
		return o << rhs;
	}
	template<typename T, template<typename E, typename A=std::allocator<E> > class C>
	ostream& operator<<(ostream &o, const C<T>& c) {return print(o, c.begin(), c.end(), 5, 2, ", ", "[", "]");}


	int main(int argc, char **argv) {
		ios_base::sync_with_stdio(false), cin.tie(0);
		${1:/* code */}
		return 0;
	}
snippet intreader
	#define READ_HELPER(fnAccum, fnEnd, fnCheck) while (true) { for (; pos != end && (fnCheck); ++pos) fnAccum;\
		if (pos != end) fnEnd; end = buffer + read(0, buffer, BUFF_SIZE), pos = buffer; }
	template<typename R> R readNextNumber() {
		const int BUFF_SIZE = 1024 * 256;
		static char buffer[BUFF_SIZE], *pos = buffer, *end = buffer;
		R rtn = 0;
		READ_HELPER(;, break, *pos < '0' || *pos > '9'); READ_HELPER(rtn = rtn * 10 + *pos - '0', return rtn, *pos >= '0' && *pos <= '9');
	}
